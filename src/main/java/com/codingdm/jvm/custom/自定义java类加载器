# Java类加载器及自定义
## 001 了解java类加载器的作用
java类加载器的作用是寻找类文件，然后加载Class字节码到JVM的内存中，链接并初始化，最终形成可以被java虚拟机直接使用的java类。

> 深入理解Java虚拟机书中有一句话：Java虚拟机把描述类的数据从Class文件加载到内存，被对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型，这个过程被称作虚拟机的类加载机制。

## 002 类加载器的种类

![picture 2](http://image.wdmblog.cn/eb9748c301807f51666458f98725d3c5f09846206aea45494f32facfcd026cbc.png)  

#### 0001 启动类加载器

所有类加载器的祖师爷，使用C++实现。负责加载最为基础，最为重要的类。比如存放在 JRE 的 lib 目录下 jar 包中的类（以及由虚拟机参数 -Xbootclasspath 指定的类）。

#### 0002 扩展类加载器

扩展类加载器的父类加载器是启动类加载器。它负责加载相对次要、但又通用的类，比如存放在 JRE 的 lib/ext 目录下 jar 包中的类（以及由系统变量 java.ext.dirs 指定的类）

#### 0003 应用类加载器

应用类加载器的父类加载器则是扩展类加载器。它负责加载应用程序路径下的类。（这里的应用程序路径，便是指虚拟机参数 -cp/-classpath、系统变量 java.class.path 或环境变量 CLASSPATH 所指定的路径。）默认情况下，应用程序中包含的类便是由应用类加载器加载的。

#### 0004 自定义类加载器

通过继承ClassLoader类实现，主要重写findClass方法。

## 类加载顺序（双亲委派模型）

站在Java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），这个类加载器使用C++语言实现；另外一种就是其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。（见下图）

但是站在Java开发人员的角度来看，类加载器就应当划分得更细致一些。

![picture 3](http://image.wdmblog.cn/3dc4efa07c38c8a67a817e5fb2b5c1e5e9172aed26fabcda11890f4cac92347b.png)  




